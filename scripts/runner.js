#!/usr/bin/env node
import { execSync } from 'child_process';
import { testScripts, projects, defaultEnv, defaultCluster, defaultDevice } from './scripts.js';

// ---------- –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã ----------
const args = process.argv.slice(2);

let selectedProjects = [];
let featureType = '';
let device = defaultDevice.toUpperCase();
let env = defaultEnv;
let cluster = defaultCluster;

args.forEach(arg => {
    const argUpper = arg.toUpperCase();

    if (argUpper === 'DEV') featureType = 'DEV';
    else if (argUpper === 'MSGR') featureType = 'MSGR';
    else if (arg.startsWith('DEVICE=')) device = arg.split('=')[1].toUpperCase();
    else if (arg.startsWith('ENV=')) env = arg.split('=')[1];
    else if (arg.startsWith('CLUSTER=')) cluster = arg.split('=')[1];
    else if (argUpper === 'ALL') selectedProjects = [...projects];
    else selectedProjects = arg.split(',').map(p => p.toUpperCase());
});

// –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
if (selectedProjects.length === 0) selectedProjects = [...projects];

// –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—Ä–æ–≥–æ–Ω–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–≤–∞–π—Å–∞
execSync(
    `npx rimraf --glob "visual-baseline/*-diff.png" "visual-baseline/*-current.png" "reports/report-*-*.json" "reports/html" "reports/*.html" "reports/screenshots" "screenshots/*"`,
    { stdio: 'inherit' }
);


// ---------- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ----------
function runTests(typeToRun, dev) {
    const featureFile = testScripts[typeToRun];

    console.log(`üöÄ –ó–∞–ø—É—Å–∫ [${typeToRun}] –¥–ª—è [${selectedProjects.join(', ')}], DEVICE=${dev}, ENV=${env}, CLUSTER=${cluster}`);

    for (const project of selectedProjects) {
        try {
            // üëà –í–∞–∂–Ω–æ! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π DEVICE, —á—Ç–æ–±—ã —à–∞–≥–∏ this.device –≤–∏–¥–µ–ª–∏ –µ–≥–æ
            process.env.DEVICE = dev;

            execSync(
                `cross-env PROJECT=${project} ENV=${env} CLUSTER=${cluster} DEVICE=${dev} npx cucumber-js ${featureFile} --format json:./reports/report-${project.toLowerCase()}-${dev.toLowerCase()}.json`,
                { stdio: 'inherit' }
            );
        } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ ${project} ${dev} (${typeToRun})`);
        }
    }
}

// ---------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ----------
let devices = [];
if (device === 'ALL') {
    devices = ['WEB', 'MOBILE'];
} else {
    devices = [device];
}

// –ó–∞–ø—É—Å–∫ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–≤–∞–π—Å–∞
for (const dev of devices) {
    let typeToRun

    if (featureType === 'DEV') {
        typeToRun = 'DEV'
    } else if (featureType === 'MSGR') {
        typeToRun = 'MSGR'
    }else if (featureType === 'MOBILE') {
        typeToRun = 'MOBILE'   
    } else typeToRun = 'WEB'
    // const typeToRun = featureType === 'DEV' ? 'DEV' : (dev === 'MOBILE' ? 'MOBILE' : 'WEB');
    console.log(`\nüì±üíª –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ ${dev}`);
    runTests(typeToRun, dev);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–ø—É—Å–∫–æ–≤
execSync(`node generateReport.js`, { stdio: 'inherit' });
